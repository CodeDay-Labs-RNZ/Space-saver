version: '3'

services:
  frontend_space_saver:
    container_name: frontend_space_saver
    build:
      context: ./frontend
      dockerfile: Dockerfile
      
    # Set environment variables directly in the docker-compose file
    # environment:
    #   ENV_VARIABLE: ${ENV_VARIABLE}
    #   NEXT_PUBLIC_ENV_VARIABLE: ${NEXT_PUBLIC_ENV_VARIABLE}

    # Set envrionment variables based on the .env file
    env_file:
      - .env
    volumes:
      - ./frontend/src:/app/src
      - ./frontend/public:/app/public
    restart: always
    ports:
      - "${FRONTENDPORT}:${FRONTENDPORT}"
#    networks:
#      - my_network


# Define a network, which allows containers to communicate
# with each other, by using their container name as a hostname

#networks:
#  my_network:
#    external: true

  spacesaver:
    container_name: backend_space_saver
    build:
      context: ./backend
      dockerfile: backend/Dockerfile

      # Set environment variables directly in the docker-compose file
    environment:
      MONGO_URI: ${MONGO_URI}  # Explicitly setting the MONGO_URI
      #   ENV_VARIABLE: ${ENV_VARIABLE}
      #   NEXT_PUBLIC_ENV_VARIABLE: ${NEXT_PUBLIC_ENV_VARIABLE}

    # Set envrionment variables based on the .env file
    env_file:
      - .env
    volumes:
      - ./backend/src:/app/src
    restart: always
    ports:
      - "${BACKENDPORT}:${BACKENDPORT}"
  #    networks:
  #      - my_network

# Define a network, which allows containers to communicate
# with each other, by using their container name as a hostname

#networks:
#  my_network:
#    external: true


  db:
    image: mongo:latest # using lates mongo image
    # Set environment variables directly in the docker-compose file
    environment:
      MONGO_INITDB_ROOT_USERNAME: root
      MONGO_INITDB_ROOT_PASSWORD: example
    #   ENV_VARIABLE: ${ENV_VARIABLE}
    #   NEXT_PUBLIC_ENV_VARIABLE: ${NEXT_PUBLIC_ENV_VARIABLE}

    ports:
      - "27017:27017"
  #    networks:
  #      - my_network